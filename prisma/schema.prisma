generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  image         String?
  password      String?        // For email/password authentication
  role          UserRole       @default(DONOR)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  sessions      Session[]
  profile       UserProfile?
  challenges    Challenge[]
  donations     Donation[]
  portfolios    Portfolio[]
  subscriptions Subscription[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  bio               String?
  location          String?
  website           String?
  monthlyBudget     Float?   @default(0)
  preferredCauses   String[]
  notificationPrefs Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Organization {
  id              String             @id @default(cuid())
  name            String
  email           String             @unique
  description     String
  website         String?
  logo            String?
  banner          String?
  location        String
  causes          String[]
  efficiencyScore Float              @default(0)
  verified        Boolean            @default(false)
  verificationDoc String?
  status          OrganizationStatus @default(PENDING)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  challenges      Challenge[]
  donations       Donation[]
  portfolioItems  PortfolioItem[]
  thankYous       ThankYou[]

  @@map("organizations")
}

model Portfolio {
  id          String          @id @default(cuid())
  userId      String
  name        String
  description String?
  isDefault   Boolean         @default(false)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  items       PortfolioItem[]
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("portfolios")
}

model PortfolioItem {
  id             String       @id @default(cuid())
  portfolioId    String
  organizationId String
  allocation     Float        @default(0)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  portfolio      Portfolio    @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@unique([portfolioId, organizationId])
  @@map("portfolio_items")
}

model Subscription {
  id          String             @id @default(cuid())
  userId      String
  portfolioId String?
  amount      Float
  currency    String             @default("USD")
  status      SubscriptionStatus @default(ACTIVE)
  stripeId    String?            @unique
  startDate   DateTime           @default(now())
  endDate     DateTime?
  lastPayment DateTime?
  nextPayment DateTime?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  donations   Donation[]
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Donation {
  id             String         @id @default(cuid())
  userId         String
  organizationId String
  subscriptionId String?
  amount         Float
  currency       String         @default("USD")
  status         DonationStatus @default(PENDING)
  stripeId       String?        @unique
  processingFee  Float?
  netAmount      Float?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  subscription   Subscription?  @relation(fields: [subscriptionId], references: [id])
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  thankYou       ThankYou?

  @@map("donations")
}

model Challenge {
  id             String          @id @default(cuid())
  organizationId String
  userId         String?
  title          String
  description    String
  targetAmount   Float
  currentAmount  Float           @default(0)
  currency       String          @default("USD")
  startDate      DateTime        @default(now())
  endDate        DateTime
  status         ChallengeStatus @default(ACTIVE)
  image          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User?           @relation(fields: [userId], references: [id])

  @@map("challenges")
}

model ThankYou {
  id             String       @id @default(cuid())
  donationId     String       @unique
  title          String
  message        String
  image          String?
  video          String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  donation       Donation     @relation(fields: [donationId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("thank_yous")
}

enum UserRole {
  DONOR
  ORGANIZATION
  ADMIN
}

enum OrganizationStatus {
  PENDING
  VERIFIED
  REJECTED
  SUSPENDED
}

enum SubscriptionStatus {
  ACTIVE
  PAUSED
  CANCELLED
  EXPIRED
}

enum DonationStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum ChallengeStatus {
  DRAFT
  ACTIVE
  COMPLETED
  EXPIRED
  CANCELLED
}
